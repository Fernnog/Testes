/**
 * @file milestone-helpers.js
 * @description M√≥dulo de utilit√°rios com a l√≥gica pura para calcular os marcos de perseveran√ßa.
 * Este arquivo foi criado para desacoplar a l√≥gica de c√°lculo da l√≥gica de renderiza√ß√£o da UI.
 */

/**
 * Define os marcos de perseveran√ßa dispon√≠veis, em ordem hier√°rquica para o c√°lculo.
 * Cada marco tem um valor, um √≠cone e um tipo ('main' para os que podem acumular, 'step' para os de preenchimento).
 * @type {Array<object>}
 */
const MILESTONES_CONFIG = [
    { value: 1000, icon: '‚òÄÔ∏è', type: 'main' },
    { value: 300,  icon: 'üíé', type: 'main' },
    { value: 100,  icon: 'üå≥', type: 'main' },
    { value: 30,   icon: '‚≠ê', type: 'main' },
    { value: 15,   icon: 'üî•', type: 'step' },
    { value: 7,    icon: 'üå±', type: 'step' }
];

/**
 * Calcula quais marcos cumulativos foram alcan√ßados com base em um n√∫mero de dias consecutivos.
 * Implementa a l√≥gica hier√°rquica e de "troco".
 *
 * @param {number} days - O n√∫mero total de dias consecutivos de intera√ß√£o.
 * @returns {Array<object>} Um array de objetos, onde cada objeto representa um marco alcan√ßado
 *                            e cont√©m a chave `icon` e `count`. Ex: [{ icon: 'üå≥', count: 2 }, { icon: '‚≠ê', count: 1 }]
 */
export function calculateCumulativeMilestones(days) {
    if (isNaN(days) || days <= 0) {
        return [];
    }
    
    let remainingDays = days;
    const achievedMilestones = [];

    MILESTONES_CONFIG.forEach(milestone => {
        if (remainingDays < milestone.value) {
            return; // Pula para o pr√≥ximo marco se n√£o houver dias suficientes
        }

        let count = 0;
        if (milestone.type === 'main') {
            // Marcos principais podem ter contadores (x2, x3)
            count = Math.floor(remainingDays / milestone.value);
            remainingDays %= milestone.value;
        } else {
            // Marcos de etapa n√£o acumulam, s√≥ aparecem uma vez no "troco"
            if (remainingDays >= milestone.value) {
                count = 1;
                remainingDays -= milestone.value;
            }
        }
        
        if (count > 0) {
            achievedMilestones.push({ icon: milestone.icon, count: count });
        }
    });

    return achievedMilestones;
}
